;; -*-mode:lisp-*-

;; record start time
(defconst *start-time* (current-time))

;; by default refresh package List if t
;; (defvar *refresh-package-list* t)
(defvar *refresh-package-list* nil)

;; set package manager
(require 'package)
(add-to-list 'package-archives
             '("elpa" . "http://tromey.com/elpa/"))
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/"))
(package-initialize)
(when *refresh-package-list*
  (package-refresh-contents))


;; (add-to-list 'load-path "~/.emacs.d/themes")
;; (load-theme 'deeper-blue t)
(unless (member 'zenburn (custom-available-themes))
  (package-install 'zenburn-theme))
(load-theme 'zenburn t)

;; (setq-default linum-mode t)

;; 設置command鍵為meta
(setq mac-command-modifier 'meta)

;; 去掉滚动条
;; (set-scroll-bar-mode nil)

;; 禁止鼠标中键滚动
(mouse-wheel-mode nil)

;; 关闭烦人的出错时的提示声
(setq ring-bell-function 'ignore)

;; 禁用产生备份文件
(setq make-backup-files nil)
(setq-default make-backup-files nil)
(setq inhibit-startup-message t)

;; 自动匹配括号
;; (setq skeleton-pair t)
;; (local-set-key (kbd "[") 'skeleton-pair-insert-maybe)
;; (local-set-key (kbd "(") 'skeleton-pair-insert-maybe)
;; (local-set-key (kbd "{") 'skeleton-pair-insert-maybe)
;; (local-set-key (kbd "<") 'skeleton-pair-insert-maybe)
;; (local-set-key (kbd "\"") 'skeleton-pair-insert-maybe)


;; (add-hook 'text-mode-hook 'turn-on-auto-fill)

;; goto-line
;; (global-set-key (kbd "M-l") 'goto-line)

;; 默認不顯示工具欄
(tool-bar-mode -1)

;; 設置用戶名和帳號
(setq user-full-name "beiwei")
(setq user-mail-address "3ogx.com@gmail.com")

;; 關閉括號匹配跳到前面
(show-paren-mode t)

;; 標題顯示buffer，爾不是用戶
(setq frame-title-format "Emacs@%b")

(setq c-set-style 4)
(setq c-basic-offset 4)

;;用空格代替tab
;; 如果出現2個空格或者8個空格的，請運行下面這句
;; 然後增加一行4
;; (customize-variable (quote tab-stop-list))
(setq indent-tabs-mode t)
(setq default-tab-width 4)
;; (setq-default indent-tabs-mode t)
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)

;; 使用y∕n代替yes∕no
(fset 'yes-or-no-p 'y-or-n-p)

;;设置 sentence-end 可以识别中文标点
(setq sentence-end "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*")
(setq sentence-end-double-space nil)

;; desktop
(desktop-save-mode t)

;; 默认启用文本模式 禁用启动信息
(setq default-major-mode 'text-mode)

;; 最近打開的文件
(recentf-mode t)
(global-set-key (kbd "C-c C-r") 'recentf-open-files)

;; 保存文件時刪除默認的空格
(setq whitespace-global-mode t)
(add-hook 'before-save-hook
          '(lambda()
             (whitespace-cleanup)))

;; 保存文件之前刪除行尾的空格
(add-hook 'before-save-hook
          '(lambda()
             (delete-trailing-whitespace)))


;; 設置默認字體
(set-default-font "-apple-monaco-medium-r-normal--18-140-72-72-m-140-mac-roman")

;; 方便的 electric-buffer-list 執行
;; 之后：
;; 光标自动转到 Buffer List buffer 中；
;; n, p 上下移动选择 buffer；
;; S 保存改动的 buffer；
;; D 删除 buffer。
;; 除此之外，不错的选择还有 ibuffer，不妨试试 M-x ibuffer。
(global-set-key (kbd "C-x C-b") 'electric-buffer-list)

;; Dired-x 在 Dired 之上又提供了很多有用的功能，这是其中之一。可以方便的在任
;; 何时候跳转到当前目录的 Dired buffer 中。
(global-set-key (kbd "C-x C-j") 'dired-jump)

;; occur 功能，列出当前 buffer 中匹配的行。如果你在 Emacs 阅读这篇说明，试试
;; M-x occur RET file RET 和 C-u 2 M-x occur RET file RET。
(global-set-key (kbd "C-x C-o") 'occur)

;; 自动补全，M-/ 原来的绑定 dabbrev-expand 也是这个功能，然而 hippie-expand
;; 功能更强而且可以扩展。
(global-set-key (kbd "M-/") 'hippie-expand)

;; 撤銷
(global-set-key (kbd "C-/") 'undo)

;; 除了在 Dired buffer 中，基本都可以用来 other-window。
(global-set-key (kbd "M-o") 'other-window)

;; 取消默認的 C-@
(global-set-key (kbd "C-@") nil)
(global-set-key (kbd "C-;") 'set-mark-command)

;; 很多文件的时候，在几个文件中跳转到曾经用过的 mark 地方。
(global-set-key (kbd "C-c C-z") 'pop-global-mark)

;; 回車後自動縮進
(global-set-key (kbd "RET") 'newline-and-indent)

;; 直接注释一行
(defun my-comment-dwim (&optional args)
  "Toggle comment"
  (interactive "p*")
  (apply 'comment-or-uncomment-region
         (if (and mark-active transient-mark-mode)
             (list (region-beginning) (region-end))
           (if (> args 0)
               (list (line-beginning-position) (line-end-position args))
             (list (line-beginning-position n) (line-end-position))))))
(global-set-key (kbd "M-;") 'my-comment-dwim)

;; 注釋一段
(global-set-key (kbd "C-M-;") 'comment-or-uncomment-region)

;; 打开鼠标所在位置的链接
(global-set-key (kbd "C-c o") 'goto-address-at-mouse)
(global-set-key (kbd "C-c O") 'goto-address-at-point)

;; 文本查找
(global-set-key (kbd "C-c f") 'occur)
(global-set-key (kbd "C-c F") 'occur-next)

;; 在行首 C-k 时，同时删除该行。
;; (setq-default kill-whole-line t)
;; (setq resize-mini-windows nil)

;; maximize emacs window
(when (not (require 'maxframe nil t))
  (package-install 'maxframe))
(add-hook 'window-setup-hook 'maximize-frame t)

;; load file cost time
;; (message ".emacs loaded in %s seconds" (mapconcat 'int-to-string (rest (time-since *start-time*)) "."))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(tab-stop-list (quote (4 8 16 24 32 40 48 56 64 72 80 88 96 104 112 120))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; Copy And Parse Current Line
(defun duplicate-line (arg)
  (interactive "*p")
  (setq buffer-undo-list (cons (point) buffer-undo-list))
  (let ((bol (save-excursion (beginning-of-line) (point)))
        eol)
    (save-excursion
      (end-of-line)
      (setq eol (point))

      (let ((line (buffer-substring bol eol))
            (buffer-undo-list t)
            (count arg))
        (while (> count 0)
          (newline)
          (insert line)
          (setq count(1- count)))
        )
      (setq buffer-undo-list (cons (cons eol (point)) buffer-undo-list)))
    )
  (next-line arg))
(global-set-key (kbd "C-:") 'duplicate-line)

(provide 'emacs)
;; vim: ft=lisp
